"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const EmbedUtil_1 = require("../../utils/EmbedUtil");
const dns_1 = __importDefault(require("dns"));
const discord_js_1 = require("discord.js");
const fs_1 = __importDefault(require("fs"));
const axios_1 = __importDefault(require("axios"));
class InfoCommand extends discord_akairo_1.Command {
    constructor() {
        super("server", {
            aliases: ["server", "servers", "players", "ip", "servercount", "serv", "rcon"],
            category: "Public Commands",
            description: {
                content: "View server information with the bot, by supplying both a IP and port!",
                usage: `${config_1.prefix}server [ip/domain] -port=[port]`,
                examples: [
                    `${config_1.prefix}server hypixel.net -port=25565`,
                    `${config_1.prefix}server 172.65.212.227 -port=25565`
                ]
            },
            ratelimit: 3,
            args: [
                {
                    id: "host",
                    type: (_, str) => {
                        if (str.toLowerCase() === "help")
                            return "SHOW_INFORMATION_SECTION";
                        if (isIPv4(str))
                            return str;
                        if (isDomain(str))
                            return str;
                        return null;
                    },
                    match: "phrase",
                    default: "172.65.212.227"
                },
                {
                    id: "port",
                    type: (_, str) => {
                        if (str && !isNaN(Number(str)) && isPort(Number(str)))
                            return Number(str);
                        return null;
                    },
                    match: "option",
                    flag: ["-port="],
                    default: 25565
                }
            ]
        });
    }
    async exec(message, { host, port }) {
        if (message.channel.type == "dm")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*You are not able to run commands in DMs, you must be in a server!*`, [])).then(msg => {
                msg.delete({ timeout: 30000 });
            });
        if (host === "SHOW_INFORMATION_SECTION")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*You must provide a Username or UUID!*", [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*Attempting to retrieving information...*`, [
            { name: `Host`, value: host, inline: true },
            { name: `Port`, value: port.toString(), inline: true }
        ])).then(async (msg) => {
            let serverInformation = await jsonRequest(`${host}:${port}`).catch(async (error) => {
                return await msg.edit(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*We had trouble retrieving information on: \`${host}:${port}\`*`, [])).then(async (msg) => {
                    msg.delete({ timeout: 30000 });
                });
            });
            if (!serverInformation["online"]) {
                return await msg.edit(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*We had trouble contacting host: \`${host}:${port}\` so we're going to check for other ports!*`, [])).then(async (msg) => {
                    let seekingPortInformation = await jsonRequest(`${host}`).catch(async (error) => {
                        return await msg.edit(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*We were unable to find any Minecraft Server ports for: \`${host}\`*`, [])).then(async (msg) => {
                            msg.delete({ timeout: 30000 });
                        });
                    });
                    if (!seekingPortInformation["online"]) {
                        return await msg.edit(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*We were unable to find any Minecraft Server ports for: \`${host}\`*`, [])).then(async (msg) => {
                            msg.delete({ timeout: 30000 });
                        });
                    }
                    else {
                        return sendMessage(seekingPortInformation);
                    }
                });
            }
            else {
                return sendMessage(serverInformation);
            }
            async function sendMessage(result) {
                let serverStatus = {
                    host: result["ip"],
                    port: result["port"],
                    players: {
                        max: result["players"]["max"],
                        online: result["players"]["online"]
                    },
                    version: {
                        name: result["version"],
                        protocol: result["protocol"]
                    },
                    online: result["online"],
                    favicon: result["icon"],
                    hostname: result["hostname"],
                    description: result["motd"]["clean"]
                };
                var bitmap = Buffer.from(serverStatus.favicon.split('data:image/png;base64,').pop(), 'base64');
                fs_1.default.writeFileSync(`${__dirname}/../../favicons/${serverStatus.host}.png`, bitmap);
                let updatedEmbed = new discord_js_1.MessageEmbed()
                    .setTitle(`**Minecraft Genie**`)
                    .setDescription(`*Successfully retrieved server information for: \`${serverStatus.host}:${serverStatus.port}\`*`)
                    .attachFiles([`${__dirname}/../../favicons/${serverStatus.host}.png`])
                    .setThumbnail(`attachment://${serverStatus.host}.png`)
                    .setFooter('Reheight#4947')
                    .setTimestamp()
                    .addFields({ name: "Player Count", value: `\`${serverStatus.players.online}/${serverStatus.players.max}\`` }, { name: "Description", value: `\`${serverStatus.description.join("\n")}\`` }, { name: "Version", value: `\`${serverStatus.version.name}\`` }, { name: "Version Protocol", value: `\`${serverStatus.version.protocol}\`` }, { name: "Address", value: `\`${serverStatus.host}\`` }, { name: "Hostname", value: `\`${serverStatus.hostname}\`` }, { name: "Port", value: `\`${serverStatus.port}\`` }, { name: "Status", value: `\`${serverStatus.online ? "Online" : "Offline"}\`` })
                    .setColor("#1ced9d");
                await msg.delete();
                return await message.util.send(updatedEmbed).then(async (msg) => {
                    await msg.delete({ timeout: 120000 });
                });
            }
        });
    }
}
exports.default = InfoCommand;
const isIPv4 = (address) => {
    let regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
    return regex.test(address);
};
const isDomain = (address) => {
    let regex = /[a-zA-Z0-9][a-zA-Z0-9-]{1,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+/;
    return regex.test(address);
};
const isPort = (port) => {
    let regex = /^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$/;
    return regex.test(port.toString());
};
const IPv4 = (address) => {
    return new Promise((resolve, reject) => {
        dns_1.default.lookup(address, (err, result) => {
            console.log(address);
            if (err)
                reject(err);
            resolve(result);
        });
    });
};
var jsonRequest = (address) => {
    return new Promise((resolve, reject) => {
        axios_1.default.get(`https://api.mcsrvstat.us/2/${address}`).then((response) => {
            resolve(response["data"]);
        }).catch((error) => {
            reject(error);
        });
    });
};
//# sourceMappingURL=data:application/json;base64,