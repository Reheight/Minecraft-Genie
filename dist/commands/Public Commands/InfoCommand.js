"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const EmbedUtil_1 = require("../../utils/EmbedUtil");
class InfoCommand extends discord_akairo_1.Command {
    constructor() {
        super("info", {
            aliases: ["info", "author", "developer", "library", "creator", "api", "about"],
            category: "Public Commands",
            description: {
                content: "Information about the bot and the developer(s)!",
                usage: `${config_1.prefix}info`,
                examples: [
                    `${config_1.prefix}info`
                ]
            },
            ratelimit: 3
        });
    }
    async exec(message) {
        if (message.channel.type == "dm")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*You are not able to run commands in DMs, you must be in a server!*`, [])).then(msg => {
                msg.delete({ timeout: 30000 });
            });
        return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*View Minecraft player and server information with ease, we provide powerful tools for your favorite game in your favorite chatting service!*", [
            { name: "<:developer:749333179210661899> Developer", value: `Reheight#4947`, inline: true },
            { name: "<:version:749333179315519578> Version", value: `1.0.0`, inline: true },
            { name: "<:typescript:752593779554517042> Language", value: `JavaScript & TypeScript`, inline: true },
            { name: "<:discordjs:749333179109736488> Library", value: `Discord.JS`, inline: true },
            { name: "<:minecraft:744964913155276901> API", value: `Mojang API`, inline: true },
            { name: "🏠 Guilds", value: `${this.client.guilds.cache.size}`, inline: true },
            { name: "🙍‍♂️ Members", value: `${this.client.users.cache.size}`, inline: true }
        ])).then(msg => {
            msg.delete({ timeout: 60000 });
        });
    }
}
exports.default = InfoCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5mb0NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvUHVibGljIENvbW1hbmRzL0luZm9Db21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbURBQXlDO0FBRXpDLHlDQUFzQztBQUN0QyxxREFBbUQ7QUFFbkQsTUFBcUIsV0FBWSxTQUFRLHdCQUFPO0lBQzVDO1FBQ0ksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNWLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQztZQUM5RSxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFdBQVcsRUFBRTtnQkFDVCxPQUFPLEVBQUUsaURBQWlEO2dCQUMxRCxLQUFLLEVBQUUsR0FBRyxlQUFNLE1BQU07Z0JBQ3RCLFFBQVEsRUFBRTtvQkFDTixHQUFHLGVBQU0sTUFBTTtpQkFDbEI7YUFDSjtZQUNELFNBQVMsRUFBRSxDQUFDO1NBQ2YsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDOUIsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJO1lBQUUsT0FBTyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sc0JBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLHFCQUFxQixFQUFFLHFFQUFxRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN6TSxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7WUFDbEMsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxzQkFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUscUJBQXFCLEVBQUUsK0lBQStJLEVBQUU7WUFDak8sRUFBRSxJQUFJLEVBQUUsMkNBQTJDLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQzNGLEVBQUUsSUFBSSxFQUFFLHVDQUF1QyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUMvRSxFQUFFLElBQUksRUFBRSwyQ0FBMkMsRUFBRSxLQUFLLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUNyRyxFQUFFLElBQUksRUFBRSx5Q0FBeUMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7WUFDdEYsRUFBRSxJQUFJLEVBQUUscUNBQXFDLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO1lBQ2xGLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtZQUM5RSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7U0FDcEYsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO1FBQ2xDLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBakNELDhCQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcbmltcG9ydCB7IHByZWZpeCB9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcclxuaW1wb3J0IHsgQnVpbGRFbWJlZCB9IGZyb20gXCIuLi8uLi91dGlscy9FbWJlZFV0aWxcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluZm9Db21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoXCJpbmZvXCIsIHtcclxuICAgICAgICAgICAgYWxpYXNlczogW1wiaW5mb1wiLCBcImF1dGhvclwiLCBcImRldmVsb3BlclwiLCBcImxpYnJhcnlcIiwgXCJjcmVhdG9yXCIsIFwiYXBpXCIsIFwiYWJvdXRcIl0sXHJcbiAgICAgICAgICAgIGNhdGVnb3J5OiBcIlB1YmxpYyBDb21tYW5kc1wiLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgY29udGVudDogXCJJbmZvcm1hdGlvbiBhYm91dCB0aGUgYm90IGFuZCB0aGUgZGV2ZWxvcGVyKHMpIVwiLFxyXG4gICAgICAgICAgICAgICAgdXNhZ2U6IGAke3ByZWZpeH1pbmZvYCxcclxuICAgICAgICAgICAgICAgIGV4YW1wbGVzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgYCR7cHJlZml4fWluZm9gXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJhdGVsaW1pdDogM1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBleGVjKG1lc3NhZ2U6IE1lc3NhZ2UpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGlmIChtZXNzYWdlLmNoYW5uZWwudHlwZSA9PSBcImRtXCIpIHJldHVybiBhd2FpdCBtZXNzYWdlLnV0aWwuc2VuZChhd2FpdCBCdWlsZEVtYmVkKHRoaXMuY2xpZW50LCBgKipNaW5lY3JhZnQgR2VuaWUqKmAsIGAqWW91IGFyZSBub3QgYWJsZSB0byBydW4gY29tbWFuZHMgaW4gRE1zLCB5b3UgbXVzdCBiZSBpbiBhIHNlcnZlciEqYCwgW10pKS50aGVuKG1zZyA9PiB7XHJcbiAgICAgICAgICAgIG1zZy5kZWxldGUoeyB0aW1lb3V0OiAzMDAwMCB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGF3YWl0IG1lc3NhZ2UudXRpbC5zZW5kKGF3YWl0IEJ1aWxkRW1iZWQodGhpcy5jbGllbnQsIFwiKipNaW5lY3JhZnQgR2VuaWUqKlwiLCBcIipWaWV3IE1pbmVjcmFmdCBwbGF5ZXIgYW5kIHNlcnZlciBpbmZvcm1hdGlvbiB3aXRoIGVhc2UsIHdlIHByb3ZpZGUgcG93ZXJmdWwgdG9vbHMgZm9yIHlvdXIgZmF2b3JpdGUgZ2FtZSBpbiB5b3VyIGZhdm9yaXRlIGNoYXR0aW5nIHNlcnZpY2UhKlwiLCBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCI8OmRldmVsb3Blcjo3NDkzMzMxNzkyMTA2NjE4OTk+IERldmVsb3BlclwiLCB2YWx1ZTogYFJlaGVpZ2h0IzQ5NDdgLCBpbmxpbmU6IHRydWUgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiBcIjw6dmVyc2lvbjo3NDkzMzMxNzkzMTU1MTk1Nzg+IFZlcnNpb25cIiwgdmFsdWU6IGAxLjAuMGAsIGlubGluZTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiPDp0eXBlc2NyaXB0Ojc1MjU5Mzc3OTU1NDUxNzA0Mj4gTGFuZ3VhZ2VcIiwgdmFsdWU6IGBKYXZhU2NyaXB0ICYgVHlwZVNjcmlwdGAsIGlubGluZTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiPDpkaXNjb3JkanM6NzQ5MzMzMTc5MTA5NzM2NDg4PiBMaWJyYXJ5XCIsIHZhbHVlOiBgRGlzY29yZC5KU2AsIGlubGluZTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6IFwiPDptaW5lY3JhZnQ6NzQ0OTY0OTEzMTU1Mjc2OTAxPiBBUElcIiwgdmFsdWU6IGBNb2phbmcgQVBJYCwgaW5saW5lOiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCLwn4+gIEd1aWxkc1wiLCB2YWx1ZTogYCR7dGhpcy5jbGllbnQuZ3VpbGRzLmNhY2hlLnNpemV9YCwgaW5saW5lOiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogXCLwn5mN4oCN4pmC77iPIE1lbWJlcnNcIiwgdmFsdWU6IGAke3RoaXMuY2xpZW50LnVzZXJzLmNhY2hlLnNpemV9YCwgaW5saW5lOiB0cnVlIH1cclxuICAgICAgICBdKSkudGhlbihtc2cgPT4ge1xyXG4gICAgICAgICAgICBtc2cuZGVsZXRlKHsgdGltZW91dDogNjAwMDAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiJdfQ==