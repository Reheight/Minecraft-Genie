"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const EmbedUtil_1 = require("../../utils/EmbedUtil");
const partners_1 = require("../../extra/partners");
const discord_js_1 = require("discord.js");
class PingCommand extends discord_akairo_1.Command {
    constructor() {
        super("partners", {
            aliases: ["partners", "affiliates", "affiliate", "partner"],
            category: "Public Commands",
            description: {
                content: "Check out our offiliates who help us out so much!",
                usage: `${config_1.prefix}affiliates`,
                examples: [
                    `${config_1.prefix}affiliates`
                ]
            },
            ratelimit: 3
        });
    }
    async exec(message) {
        if (message.channel.type == "dm")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*You are not able to run commands in DMs, you must be in a server!*`, [])).then(msg => {
                msg.delete({ timeout: 30000 });
            });
        let pages = partners_1.partners;
        var page = 1;
        const currentPartner = (index) => {
            return pages[page - 1];
        };
        const getInvite = (guild) => {
            return new Promise((resolve, reject) => {
                if (guild.member(this.client.user).permissions.has('VIEW_AUDIT_LOG')) {
                    return guild.fetchInvites().then(invites => {
                        let invite = invites.random();
                        return resolve(`https://www.discord.gg/${invite.code}`);
                    });
                }
                else {
                    return resolve();
                }
            });
        };
        const getEmbed = async (index) => {
            const newEmbed = new discord_js_1.MessageEmbed()
                .setTitle(`**${this.client.guilds.cache.get(currentPartner(page).guild).name}**`)
                .setDescription(`*${currentPartner(page).description}*`)
                .setFooter(`Page ${page}/${pages.length}`)
                .addFields({ name: "Server", value: currentPartner(page).address }, { name: "Discord", value: await getInvite(this.client.guilds.cache.get(currentPartner(page).guild)) ? `[Join Here](${await getInvite(this.client.guilds.cache.get(currentPartner(page).guild))})` : "Unavailable" })
                .setTimestamp()
                .setThumbnail(this.client.guilds.cache.get(currentPartner(page).guild).iconURL())
                .setColor("#1ced9d");
            return newEmbed;
        };
        return message.util.send(await getEmbed(page)).then(msg => {
            msg.react('◀').then(async (r) => {
                msg.react('▶').then(async (r) => {
                    const backwardsFilter = (reaction, user) => reaction.emoji.name === '◀' && user.id === message.author.id;
                    const forwardsFilter = (reaction, user) => reaction.emoji.name === '▶' && user.id === message.author.id;
                    const backwards = msg.createReactionCollector(backwardsFilter, { time: 60000 });
                    const forwards = msg.createReactionCollector(forwardsFilter, { time: 60000 });
                    backwards.on('collect', async (r) => {
                        if (page === 1)
                            return await r.users.remove(message.author);
                        page--;
                        await msg.edit(await getEmbed(page));
                        return await r.users.remove(message.author);
                    });
                    forwards.on('collect', async (r) => {
                        if (page === pages.length)
                            return await r.users.remove(message.author);
                        page++;
                        await msg.edit(await getEmbed(page));
                        return await r.users.remove(message.author);
                    });
                });
            });
        });
    }
}
exports.default = PingCommand;
//# sourceMappingURL=data:application/json;base64,