"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const EmbedUtil_1 = require("../../utils/EmbedUtil");
const minecraft_player_1 = __importDefault(require("minecraft-player"));
class LookupCommand extends discord_akairo_1.Command {
    constructor() {
        super("lookup", {
            aliases: ["lookup", "who", "whois", "search", "find", "get"],
            category: "Public Commands",
            description: {
                content: "Find out the UUID/Username of a player.",
                usage: `${config_1.prefix}lookup [username/uuid]`,
                examples: [
                    `${config_1.prefix}lookup Reheight`,
                    `${config_1.prefix}lookup d4be07ab-fc80-46ca-8706-70947a8e9beb`
                ]
            },
            ratelimit: 3
        });
    }
    async exec(message, { identifier }) {
        if (message.channel.type == "dm")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*You are not able to run commands in DMs, you must be in a server!*`, [])).then(msg => {
                msg.delete({ timeout: 30000 });
            });
        let args = message.toString().split(" ").filter((value, index) => index !== 0);
        if (args.length < 1) {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*You must provide a Username or UUID!*", [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        }
        if (args.length > 1) {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*You must provide only one argument!*", [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        }
        const minecraftResponse = await minecraft_player_1.default(args[0]).catch(async (error) => {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", `*You must provide a valid identifier!*\n**INVALID IDENTIFIER:** \`${args[0]}\``, [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        });
        if (!minecraftResponse)
            return;
        return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*Information of: \`${minecraftResponse["username"]}\`!*`, [
            { name: `UUID`, value: minecraftResponse["uuid"], inline: true }
        ])).then(async (msg) => {
            await msg.delete({ timeout: 60000 });
        });
    }
}
exports.default = LookupCommand;
//# sourceMappingURL=data:application/json;base64,