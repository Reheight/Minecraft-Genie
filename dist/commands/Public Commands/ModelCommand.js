"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_akairo_1 = require("discord-akairo");
const config_1 = require("../../config");
const EmbedUtil_1 = require("../../utils/EmbedUtil");
const minecraft_player_1 = __importDefault(require("minecraft-player"));
const fs_1 = __importDefault(require("fs"));
const request_1 = __importDefault(require("request"));
class ModelCommand extends discord_akairo_1.Command {
    constructor() {
        super("model", {
            aliases: ["model", "skin", "player", "render", "view"],
            category: "Public Commands",
            description: {
                content: "View the rendered skin of a registered Minecraft member.",
                usage: `${config_1.prefix}model [username/uuid]`,
                examples: [
                    `${config_1.prefix}model Reheight`,
                    `${config_1.prefix}model d4be07ab-fc80-46ca-8706-70947a8e9beb`
                ]
            },
            ratelimit: 3
        });
    }
    async exec(message, { identifier }) {
        if (message.channel.type == "dm")
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*You are not able to run commands in DMs, you must be in a server!*`, [])).then(msg => {
                msg.delete({ timeout: 30000 });
            });
        let args = message.toString().split(" ").filter((value, index) => index !== 0);
        if (args.length < 1) {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*You must provide a Username or UUID!*", [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        }
        if (args.length > 1) {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", "*You must provide only one argument!*", [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        }
        const minecraftResponse = await minecraft_player_1.default(args[0]).catch(async (error) => {
            return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", `*You must provide a valid identifier!*\n**INVALID IDENTIFIER:** \`${args[0]}\``, [
                { name: `Usage`, value: `${this.description["usage"]}` },
                { name: `Examples`, value: `${this.description["examples"].join("\n")}` }
            ])).then(msg => {
                msg.delete({ timeout: 60000 });
            });
        });
        if (!minecraftResponse)
            return;
        return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, `**Minecraft Genie**`, `*Stay patient while we retrieve the skin of: \`${minecraftResponse["username"]}\`!*`, [])).then(async (msg) => {
            var download = (uri, filename, callback) => {
                request_1.default.head(uri, (err) => {
                    if (err)
                        return;
                    request_1.default(uri).pipe(fs_1.default.createWriteStream(filename)).on('close', callback);
                });
            };
            download(`https://visage.surgeplay.com/full/832/${minecraftResponse["uuid"]}`, `${__dirname}/../../skins/${minecraftResponse["uuid"]}.png`, async () => {
                let imageAttachment = `${__dirname}/../../skins/${minecraftResponse["uuid"]}.png`;
                await msg.delete();
                return await message.util.send(await EmbedUtil_1.BuildEmbed(this.client, "**Minecraft Genie**", `*You are viewing the skin of: \`${minecraftResponse["username"]}\`*`, [], [imageAttachment])).then(async (msg) => {
                    await msg.delete({ timeout: 60000 });
                });
            });
        });
    }
}
exports.default = ModelCommand;
//# sourceMappingURL=data:application/json;base64,